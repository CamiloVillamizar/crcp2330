// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

    //uses the MSB to get the instruction type
    Not(in = instruction[15], out = aInst);
    Not(in = aInst, out = cInst);
    And(a = cInst, b = instruction[5], out = cInstOut);
    Mux16(a = instruction, b = ALUout, sel = cInstOut, out = aIn);
    
    //load a if its a AInst or CInst and the dest is to register a
    Or(a = aInst, b = cInstOut, out = loadA);
    ARegister(in = aIn, load = loadA, out = ARegOut);

    //selects a or m based on the instruction bit
    Mux16(a = ARegOut, b = inM, sel = instruction[12], out = AM);

    //loads the d register using the ALU output
    And(a = cInst, b = instruction[4], out = loadD);
    DRegister(in = ALUout, load = loadD, out = Dout);

    //send values through the ALU
    ALU(x = Dout, y = AM, zx = instruction[11], nx = instruction[10], zy = instruction[9], ny = instruction[8], f = instruction[7], no = instruction[6], out = ALUout, zr = zr, ng = ng);

    //write to memory
    Or16(a=false, b=ARegOut, out[0..14]=addressM);
    Or16(a=false, b=ALUout, out=outM);
    And(a=cInst, b=instruction[3], out=writeM);

    // calc PCload & PCinc - whether to load PC with A reg

    // jump if equal
    And(a = zr, b = instruction[1], out = jequal);

    // jump if less than
    And(a = ng, b = instruction[2], out = jLessThan);

    // zero or negative
    Or(a = zr, b = ng, out = zon);

    // not zero or negative(positive)
    Not(in = zon, out = pos);

    // jump if greater than
    And(a = pos, b = instruction[0], out = jumpGreaterThan);

    // jump if less than or equal
    Or(a = jequal, b = jLessThan, out = jumpLessEqual);

    // jump if conditions are met
    Or(a = jumpLessEqual, b = jumpGreaterThan, out = jumpToA);

    // Only jump if C instruction
    And(a = cInst, b = jumpToA, out = PCload);

    // only increment if PC wasnt loaded
    Not(in = PCload, out = PCinc);

    //call the pc
    PC(in = ARegOut, inc = PCinc, load = PCload, reset = reset, out[0..14] = pc);
}